.. Kenneth Lee 版权所有 2021

:Authors: Kenneth Lee
:Version: 1.0

一个例子——逐句翻译是怎么掐断逻辑链的
**************************************

介绍
=====

最近分析一个问题的时候想详细看看MESI怎么定义的，图方便，我就去查了中文维基百科
的词条。基本上没看懂。

然后我又去看了一下英文版的wikipedia。我注意到前者基本上是后者的逐字翻译。而且说
起来呢，每句翻译起来也算不上错，但综合起来呢，前者你就搞不清楚它在说什么，后者
却相当清楚。

所以我想要剖析一下这个例子。

剖析
=====

我们先看两者对MESI的总结，中文版是这样的：

        | MESI协议是一个基于失效的一致性协议，是支持回写（write-back）
        | 缓存的最常用协议。

基于“失效”的一致性协议？这是什么东西？

英文版是这样的：

        | The **MESI protocol** is an Invalidate-based 
        | *cache coherence protocol*, and is one of the most common
        | protocols which support *write-back caches*.

你如果从字面来说呢，这句话翻译得一点问题没有。但后面这个我就能看懂，而前面这个
我就看不懂。为什么呢？有这么几个原因：

1. 中文版本的“一致性协议”是没有定语的，什么的“一致性协议”呢？网络？计算机？系列
   小说？不知道。但英文版本是个链接，整个cache coherence protocol是一个对另一个
   词条的索引。我简单点一下都知道这是计算机Cache一致性协议，但中文版本我永远不
   会知道。后面的write-back caches是一样的问题。

2. 中文版本的“基于失效”你完全想不到这个协议怎么就基于失效了，一个cache同步协议，
   怎么基于“失效”呢？我们平时说的“失效”，是这个东西失去功能了。你能从哪个角度
   设想一个cache同步，怎么会基于“失效”这种情况来设计呢？但英文版就没有这个问题，
   因为Invalidate是一个主动语气，它表示“主动使对方无效”。作为一个cache同步协议，
   这个名字能让我马上反应出，这个协议是靠一方主动把另一方已经有效的Cache，置为
   无效，从而实现cache之间的同步的。

我们再看后面的进一步解释。这是中文版：

        | 总有“脏”（dirty）状态表示缓存中的数据与主存不同。MESI协议要求在
        | 缓存不命中（miss）且数据块在另一个缓存是，允许缓存到缓存的数据复制。

第一句和第二句之间用了一个句号，但从语气上还是可以看出第一句是第二句的某种“条件
”。这这句话对于说明MESI是什么的作用到底是什么呢？我从这句话得到的信息是什么呢？
谁有dirty状态，dirty状态又和miss有什么关系呢？

然后我们看英文版：

        | There is always a dirty state present in write back caches which
        | indicates that the data in the cache is different from that in
        | main memory. Illinois Protocol requires cache to cache transfer
        | on a miss if the block resides in another cache.

这个就可以看懂了。这里第一话是个陈述句。先描述了一个事实：在write back caches中
，中会有一个dirty状态表示cache的数据和主存的数据是否一致。然后说，MESI（这里用
Illinois表示，这个在原文有解释，我跳过了，Illinois是MESI协议的另一个叫法）协议
需要通过cache到cache之间传输达成数据一致。如果对Cache同步协议有所认识，我很容易
知道这在说什么：这是在描述MESI的关键特征，它不是从主存中获得dirty的数据，而可以
直接从其他cache上得到最新的数据。

这个例子还是一样的，中文的翻译，从单句来说，其实没有多少瑕疵，但合在一起，你根本
不知道它在说什么。而英文版本，是个连续的逻辑链。

我们接着看正文。正文的第一章，叫State（状态）。题目要靠内容来解释，中文版第一句
话是这样的：

        | 缓冲行有四种不同的状态：

上下文呢？什么缓冲行就有四种不同的状态了？有四种不同的状态跟MESI有什么关系？我
应该怎么take（认知）这个信息？

对比一下英文版本：

        | The letters in the acronym MESI represent four exclusive states
        | that a cache line can be marked with (encoded using two
        | additional bits):

你看，这个逻辑就是从根子上开始建的：你不是问我MESI是什么吗？我现在告诉你，MESI
是四个字母，表示四种不同的状态。而且我明确告诉你，这四个状态是“正交的”（互相不
相容）。可以用两个bit标记在Cacheline上。

注意一下区别啊：

1. 这不是说cacheline有四种状态，cacheline状态可以有很多，但MESI是附加上去的一个
   独立的状态。有点简单的集合论的认识，就能发现这是不同的。

2. 英文版本多了一个信息：MESI四个状态是正交的。而且明确加了一个例证：可以用两个
   bit表示，如果这不是正交的，就需要超过2个bit才能表示了。

3. 最后一个区别前面提到了，英文版本逻辑的根是不同的。和也制造了范围的不同。中文
   版本说“缓冲区有四种不同的状态”，这个范围是无限大，而且你没法猜这范围是什么，
   这句话说完了，你拿不到信息。英文版本说的是MESI的含义，它的范围是有限的。就是
   你的Cache算法如果用MESI协议，你的cache上需要带上两个bit表示这个状态。至于缓
   冲行有多少状态，这个事情“不知”（\ :doc:`“知不知”如何影响决策的？`\ ）。

后面的例子就不看了，其中中文版更不堪，但原理都是一样的，我这里不是做翻译，就不
细看了。


总结
=====

我对这个问题有兴趣，主要是因为，中文维基百科这个版本，实在太像我们不少工程师写
的设计文档了。我想从中深挖一下，为什么会出现这种情况的。

中文维基百科这些翻译者，我想不能说他们不努力，而且从单句来说，这些翻译也不能说
它差。但整个文档，也只是说“非常差”，反正如果你不懂MESI，不要指望看这些文字看懂
到底什么是MESI，甚至会让你更加的懵逼。究其原因，说到底就是翻译者根本就不知道原
文说的是个什么东西，没办法维系整个文字上下文一直维系的那个逻辑关系，没有办法保
证前一句描述的那个集合，和后一句从另一个角度描述的那个集合是基本重合的。因为文
字表达的集合在不同的语言上就是不同的。一个典型的例子就是羊，英文就没有直接对应
的集合，无论是goat，sheep，bushbuck，anteope，都不是中国人说的羊那个集合，甚至
没有包含关系，也没有清晰定义，因为语言就是这样的。

但为什么我们懂行的工程师也会这样呢？我猜啊，是因为我们很多工程师就是读这样的“中
文翻译”入行的。也许他们已经习惯了看这种上不着天，下不着地的文字了，然后他们就不
会思考了，自己写的东西，除了代码，其他的文字抽象都是这样没有逻辑的。

如果是这样，简直没救。我以前有一个认知：英文背景的工程师明显比中文背景的工程师
在写文档的时候明显有逻辑。现在看来，这个认识可能是有道理的。实际情况就是，我们
大部分工程师就是靠看这样的“翻译”学术文章长大的。

但我也不认为是中文表达能力不强。过去确实也看过有人提出中文缺乏理性的表达能力。
其实这个要看领域，中文原生的表达，都是逻辑性极强的，比如我最近看资治通鉴记录的
一些总结：

        |  （文侯问李克如何看人）
        | 克曰：君弗察故也。居视其所亲，富视其所与，达视其所举，穷视其所不取。
        | 五者足以定之矣。

这个指代的范围非常清晰啊。

再看逻辑链：

        | （贾谊上汉文帝疏）
        | 臣窃惟今之事势，可为痛哭者一，可为流涕者二，可为长太息者六……
        | 使为治，劳志虑，苦身体，乏钟鼓之乐，勿为可也……
        | 然天下少安，何也？大国之王幼弱未壮，上数爽其尤……
        | ……可痛哭者，此病是也。

一环套一环，从一个最大的集合（为治）一步步收缩到当前形式，然后排序。洋洋洒洒数
千字，一直都不会离开逻辑链。

就不说这些古代精英的文字了，就说我前面简单的翻译，也同样能把那个问题说清楚。所以
事情不在于语言，而在于你有没有打算维持你的逻辑链。而逻辑链基本上不能靠文字给你说
清楚，它是文字背后的那个“意思”，那个“指向”。那个“无名”的，在背后萦绕着的那个
Pattern。

所以，到头来我也没有什么可以总结的了。如果读者实在看不懂本文的“道”，那么在“器”
上，我就只能说，计算机资料，还是尽量看英文的吧。
