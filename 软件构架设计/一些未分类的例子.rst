.. Kenneth Lee 版权所有 2021

:Authors: Kenneth Lee
:Version: 1.0

一些未分类的例子
========================

提前决定细节的问题
---------------------------

比如你设计IO设备的IO配置空间，里面有很多功能，比如你需要有域表示endian，有域表
示同步还是异步，有域表示过滤表段地址……等等等等。

架构设计阶段，你马上要决定细节，你也可以给每个这种域一个确定的位置。但这明显是
不对的，因为我们可以把这些域进行组合，让部分功能接近的功能合并到同一个字里面。
如果你非要提前决定这个细节，我们只好把这些域——很多说不定只有一位——让它们每个独
占一个字。

这就是提前决定细节的问题。

多属性问题
------------

今天收到一个任务，管理层让我报告一下某个项目的执行进展。我开始写一个汇报胶片，在
这个汇报的“背景介绍”章节，我有这么几个目的：

1. 管理层希望知道项目的执行情况，我要告诉他们这个执行情况。

2. 我自己也正需要对项目的逻辑进行一次Review，看看有没有走偏。

3. 最近有一些声音，说我们这个项目应该走另一个方向，我们正需要回复一下这种声音。

你看，这些全部都是实实在在的我的投资的动力，然则，这里面哪个是“主要矛盾”呢？显
然是第二个，因为1和3都需要通过2来解决。

也许你会有一些腹黑的判断，比如你会认为，管理层其实不是要知道项目的执行情况，而
是管理层没钱了，要找个理由把项目灭掉。或者3里面那些人是为了政治斗争，为自己的项
目争资源。但从一个“正道”的角度来说，2还是最稳的动力。要解决1，3的问题，仍是先解
决第2个问题。

到我们确切写报告的内容的时候，2是主逻辑，2已经回答的1、3的问题，我们就不用管了，
但如果还有一些证据可以增强1和3的答案，我们可以在主逻辑之外补上去。

这就是构架师解决多个属性问题的方法，所以我们所架构师的解决方案是立体的，代码的
解决方案是拍扁的。

从权问题
----------

今天女儿进学校的时候，家长系统发过来一个消息，说她已经离校。这明显是个状态处理
错误。这让我有了这个感慨：

架构设计很反直觉，因为它设计的是多个视图独立的逻辑。在某个视图上成立，在其他视
图上不一定成立。我们只是设计一个权衡的机会。比如前面这个问题，我可以评价说，这
个设计工程师“烂”，因为这种层次的错误，在模块级别就应该被单元测试发现出来了。不
可能出现在客户面前，更不要说连续很久地出现在客户面前。但如果我作为这个方案的架
构师这种问题是否出现，完全取决于我有多少钱做这个项目，以及这个团队的水平。毕竟
这个问题出现在逻辑的枝叶上，它还没有识别错人，没有死机。后面这些问题更严重。

这是一个例子，说明你说（或者说认为）什么是对的，和你选择做什么，这是分离的。
