.. Kenneth Lee 版权所有 2022

:Authors: Kenneth Lee
:Version: 0.1
:Date: 2022-08-28
:Status: Draft

C++编程入门3：程序的组成和编译链接的原理
****************************************

这一章我们来看看一个C程序是怎么组成的。

第一章我们介绍了计算机的组成和运行原理。它是个上电开机就开始转的东西，转起来以
后它首先运行什么地方的程序呢？这些程序很多也是用C写的（也有少部分用汇编写），但
一般程序员都不写那部分代码。因为它是和做计算机的人把内存的地址是什么啊，外设每
个地址表示什么啊这些东西，我们学习可以先学习比较通用的C/C++语言语法，能做我们需
要的计算就可以了，其他东西慢慢再说。

所以，计算机刚刚启动的代码（叫固件），启动完以后关注所有的输入输出设备、内存这
些东西的代码（叫操作系统），我们就先不管。我们编译一个C/C++程序，这个程序我们交
给操作系统，操作系统想办法给我放到一个内存里面去运行，这就可以了，其他细节，我
们不关心。

所以，从这个角度，我们可以理解一下我们的程序到底在干什么：::

  void test_sum(void) {
    int sum = 0;
    for (int i = 0; i < 100; i++) {
            sum += i;
    }
    printf("sum = %d\n", sum);
  }
  
  int main(void)
  {
    test_sum();
    return 0;
  }

上面这个是个完整的程序。你要把它看作是人给计算机（其实现在是操作系统负责代表计
算机来接受你的要求了）一份任务说明书。

这个说明书的main部分，就是主任务。操作系统拿到这个说明书，首先去找main在哪里，
然后就看到里面要求执行test_sum这个子任务，然后我们去看test_sum这个子任务，里面
首先说：我要一个内存，能放得下一个整数（int），一开始等于0。然后它接着说（注意
，下面的话用数学证明题的方式来理解）：

  对于每个整数i，从0开始，每次加1，直到100，请把sum加上i。

这就是之前我们说的，我们尽量让计算机来做重复的事情，我们来做创造的事情。要有多
少个i加起来，每次加放到什么内存中，这些事情我们去给计算机想明白，而计算机负责把
这件事重复100遍。

我们的脑子只要简单动一下，把这里说的100改成100000，计算机就会多算1000倍的过程。
我们负责高等级的脑力劳动，计算机负责低等价的脑力劳动。这就是计算机的核心用途。

这个main，定义了一个计算过程，我们称为一个“函数”。C语言的程序主要就是定义这样一
个函数，操作系统负责从这个函数入口的地方开始执行，到结束的地方结束。它和数学上
用函数定义一条公式差不多，它也确实可以直接用来定义一个函数，比如下面这个函数用
来计算一个多项式：::

  float f(float x)
  {
        return 3 * x^2 + 2 * x + 1;
  }

这个函数把输入的x计算一条多项式的值。但你可以分成很多步来计算这个函数，比如这样：::

  float f(float x)
  {
        float y;

        y = 3 * x * x + 2 * x + 1;
        y = y * y * y;
        return y;
  }

这是先用多项式计算这个y，然后再算y的三次方，这分成了两步来算这个结果。

函数里面可以调用函数比如前面这个计算过程，我们把两个计算步骤分成两个函数，可以
写成这样：::

  float f1(float x)
  {
        return 3 * x * x + 2 * x + 1;
  }

  float f2(float x)
  {
        return x * x * x;
  }

  float f(float x)
  {
        float y;

        y = f1(x);
        y = f2(y);
        return y;
  }

这个f也可以写成这样：::

  float f(float x)
  {
        return f2(f1(x));
  }

这个形式一写，你应该就明白，这就是复合函数。

经过这样一举例，你应该看出来了：其实一个C程序就是写一堆的函数，用这堆函数来完成
一些计算（计算的方法就称为“算法”，算法有很多经验和技巧，这是你未来的课程之一）。

C程序不用关心寄存器，这事情现在都交给编译器了，所以你唯一要关心的是内存。内存在哪里，
这是编译器和操作系统约定的，你就说你要多少内存就可以了。这叫数据类型定义，比如前面这
个函数的float y，就是一个数据类型定义。它表示在内存里面找个位置，用来放一个数据。
这个数据前面那个声明，叫这个数据的“类型”。它有两个作用：

1. 类型决定这个数据要多少内存才能放得下；
2. 类型决定这个数据怎么用；

比如int，表示这个数据是个整数，在一般的平台上，它是32bit的（有些平台上是其他长
度的，这个教材里面会讲，等你看到再说）。而float，表示这个数据是个小数，它也是
32bit的。这两个类型占的内存一样，但因为类型不一样，你用来做加减乘除，结果就会不
一样。所以我们说，类型不但决定了要多少内存，还决定它怎么用。否则存在内存里面的
就是个冷冰冰的数字，你没法解释它什么意思。

当然，作为中级语言，C语言也可以让你直接控制写什么内存地址，比如我要写0x123456这个地址，
我可以直接这样写：::

  int *a_address = 0x123456;    // 定义一个整数的地址，这个地址等于0x123456
  *a_address = 10;              // 向地址里面写10

这种地址，在C语言里面叫“指针”，Pointer。这个地方思维要拗口一点了：这里你先要求
编译器给你一个内存，用来放“指针”这个数字，然后你把指针的数字当作内存的地址，把
那个内存地址上的内容当作一个数据来用。图示如下：

.. figure:: todo.svg

todo：先备个份，晚点再写。

好了，刚才我们知道一个程序是怎么写成的了，用这种方法你可以实现很复杂的计算。也可以通过
直接访问

* todo: 4: 基本程序元素解释
* todo: 5：调试
* todo：6：Makefile和git入门
