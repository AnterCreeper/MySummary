.. Kenneth Lee 版权所有 2022

:Authors: Kenneth Lee
:Version: 0.1
:Date: 2022-08-27
:Status: Draft

C++编程入门2：开发环境
**********************

正如上一章说的，C++是一门“语言”，学一门语言最简单的方法就是用。一句话一句话学怎
么讲，然后练习什么“自我介绍”啦，什么旅游心得啦，慢慢就学会了。

计算机语言也是一样的，随便找本书，把上面的例子全部敲到计算机里面，都试一下，用
多了，就会了。这东西比英语容易学，因为计算机的语言实在是太贫瘠了。而且你学会一种
语言以后，其他的语言都是大同小异的，类比一下也就知道了，不外乎就是函数调用，判断，
循环，跳转这么几个套路。那个东西不需要我额外教。

但写一个C或者C++的程序需要用编译器编译，而且要找一个平台运行看看计算机给你的结
果是什么，所以我这里重点讲一下怎么建立一个这样的工作环境，以便你可以把那些例子
敲进去，试试结果是怎么样的。

每种计算机都会提供自己的汇编和C编译环境的，每个都有有点区别。很多时候我们会把时
间浪费在怎么用这些环境上。我的建议是先熟悉其中一种，其他都是大同小异，到时候类比
就可以了。

这些环境有些会像Office一样，一开始打开一个大程序，然后给你一个窗口，你好像写
Word文档一样，把程序敲进去，然后在菜单中找到“run”这个命令，敲一下，你就看到运行
的结果了。你让我教，我不会从这样的环境入门，因为这样自动化的东西太多了，你弄完
都是一脸懵逼，不知道自己搞了些啥，这种经验也不利于你把经验推广到其他语言上。

所以我建议你使用Windows上的Linux运行环境，你现在机器上已经安装这个了，你联网后，
先用：::

  sudo apt install g++
  sudo apt install gdb      <--- 这是调试器，先装上，我们以后说怎么用

安装C++编译器。这个g++是gnu c++ toolchain的简称。GNU是一个开源组织，它的开发工
具都是免费的，代码也是开放的，用惯以后，以后你学习编译器原理的时候，可以直接看
它的代码，看看你感受到的功能，是怎么用C语言实现出来的。

g++是一个toolchain，不仅仅是编译器。我们上一章说了，你写了C++的程序，需要编译器
翻译成汇编程序，再把汇编程序汇编成二进制。所以，安装g++，你得到的不仅仅是一个编
译器，你同时还安装了全套的工具，比如：

1. 汇编器，这叫as，它的用途你已经知道了
2. 编译器，这叫ccl，这是我们说的编译器
3. 预编译器，这叫cpp，这是编译之前对你写的代码的预出来的一个工具，这个等你学宏
   和头文件的时候会知道的
4. 链接器，这个用于把你多个代码文件合并成一个的工具。
5. 其他配套工具，比如反汇编用的objdump等等，调试用的gdb等等。

而g++是一个组合器，你不需要一个个运行前面的程序（但你可以），g++会一次把这种工
作组合在一起来做的。

如果你要写程序，比如你写了两个文件：::

  my_application.cc     # 主程序
  my_functions.cc       # 单独的函数

C++的程序都是文本文件，扩展名通常叫cc或者cpp，你可以用vim一个个敲进去，敲完以后，用
这个命令进行处理：::

  g++ -Wall -g my_application.cc my_function.cc -o my_app

带-的都是g++的控制参数，其中-Wall, -g都可以不写。-Wall表示Warning All，就是把所
有有可能写错的地方都提示出来。-g表示这个程序是准备调试的（这本来应该叫-d才对，
debug嘛，但-d被其他功能用了，就只好换成-g了），程序里面会生成很多调试采用的信息
，如果你不调试这个程序就不写这个，这样程序就小一点，快一点。当然，这些都是针对
正规有几万几百万行代码的程序来说的，对于例子程序来说，这些所谓大一点，快一点什
么的，都不值一提。

-o my_app，表示output，表示生成的二进制叫my_app，这样你就会得到一个可以运行的命
令了。直接执行./my_app就可以看看你的输出是什么了。

* todo：3：程序的组成和编译链接的原理
* todo: 4: 基本程序元素解释
* todo: 5：调试
* todo：6：Makefile和git入门
