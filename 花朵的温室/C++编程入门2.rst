  .. Kenneth Lee 版权所有 2022

:Authors: Kenneth Lee
:Version: 0.1
:Date: 2022-08-27
:Status: Draft

C++编程入门2：开发环境
**********************

正文
====

正如上一章说的，C++是一门“语言”，学一门语言最简单的方法就是用。一句话一句话学怎
么讲，然后练习什么“自我介绍”啦，什么旅游心得啦，慢慢就学会了。

计算机语言也是一样的，随便找本书，把上面的例子全部敲到计算机里面，都试一下，用
多了，就会了。这东西比英语容易学，因为计算机的语言实在是太贫瘠了。而且你学会一种
语言以后，其他的语言都是大同小异的，类比一下也就知道了，不外乎就是函数调用，判断，
循环，跳转这么几个套路。那个东西不需要我额外教。

但写一个C或者C++的程序需要用编译器编译，而且要找一个平台运行看看计算机给你的结
果是什么，所以我这里重点讲一下怎么建立一个这样的工作环境，以便你可以把那些例子
敲进去，试试结果是怎么样的。

所以，这一章开始，你就需要拿出计算机来，对着这里的方法，一个个试过去了。

每种计算机都会提供自己的汇编和C编译环境的，每个都有有点区别。很多时候我们会把时
间浪费在怎么用这些环境上。我的建议是先熟悉其中一种，其他都是大同小异，到时候类比
就可以了。

这些环境有些会像Office一样，一开始打开一个大程序，然后给你一个窗口，你好像写
Word文档一样，把程序敲进去，然后在菜单中找到“run”这个菜单，敲一下，你就看到运行
的结果了。你让我教，我不会从这样的环境入门，因为这样自动化的东西太多了，你弄完
都是一脸懵逼，不知道自己搞了些啥，这种经验也不利于你把经验推广到其他语言和环境
上。

所以我建议你使用Windows上的Linux运行环境，你现在机器上已经安装这个了，你联网后，
先用：::

  sudo apt install g++
  sudo apt install gdb      <--- 这是调试器，先装上，我们以后说怎么用

安装C++编译器。这个g++是gnu c++ toolchain的简称。GNU是一个开源组织，它的开发工
具都是免费的，代码也是开放的，用惯以后，以后你学习编译器原理的时候，可以直接看
它的代码，看看你感受到的功能，是怎么用C语言实现出来的。

g++是一个toolchain，不仅仅是编译器。我们上一章说了，你写了C++的程序，需要编译器
翻译成汇编程序，再把汇编程序汇编成二进制。所以，安装g++，你得到的不仅仅是一个编
译器，你同时还安装了全套的工具，比如：

1. 汇编器，这叫as，它的用途你已经知道了
2. 编译器，这叫ccl，这是我们说的编译器
3. 预编译器，这叫cpp，这是编译之前对你写的代码的预出来的一个工具，这个等你学宏
   和头文件的时候会知道的
4. 链接器，这个用于把你多个代码文件合并成一个的工具。
5. 其他配套工具，比如反汇编用的objdump等等，调试用的gdb等等。

而g++是一个组合器，你不需要一个个运行前面的程序（但你可以），g++会一次把这种工
作组合在一起来做的。

如果你要写程序，比如你写了两个文件：::

  my_application.cc     # 主程序
  my_functions.cc       # 单独的函数

C++的程序都是文本文件，扩展名通常叫cc或者cpp，你可以用vim一个个敲进去，敲完以后，用
这个命令进行处理：::

  g++ -Wall -g my_application.cc my_function.cc -o my_app

带-的都是g++的控制参数，其中-Wall, -g都可以不写。-Wall表示Warning All，就是把所
有有可能写错的地方都提示出来。-g表示这个程序是准备调试的（这本来应该叫-d才对，
debug嘛，但-d被其他功能用了，就只好换成-g了），程序里面会生成很多调试采用的信息
，如果你不调试这个程序就不写这个，这样程序就小一点，快一点。当然，这些都是针对
正规有几万几百万行代码的程序来说的，对于例子程序来说，这些所谓大一点，快一点什
么的，都不值一提。

-o my_app，表示output，表示生成的二进制叫my_app，这样你就会得到一个可以运行的命
令了。直接执行./my_app就可以看看你的输出是什么了。

我们说了，g++其实不是编译器，它是一个组合器，用来把其他命令组合起来，如果你想要知道它怎么组合的，
你可以在命令上加一个-v的参数，这是verbose的简称，你会看到类似这样的结果：::

  Using built-in specs.
  COLLECT_GCC=g++
  COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/9/lto-wrapper
  OFFLOAD_TARGET_NAMES=nvptx-none:hsa
  OFFLOAD_TARGET_DEFAULT=1
  Target: x86_64-linux-gnu
  Configured with: ../src/configure -v --with-pkgversion='Ubuntu 9.4.0-1ubuntu1~20.04.1' --with-bugurl=file:///usr/share/doc/gcc-9/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,gm2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-9 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-9-Av3uEd/gcc-9-9.4.0/debian/tmp-nvptx/usr,hsa --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
  Thread model: posix
  gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)
  COLLECT_GCC_OPTIONS='-v' '-o' 'my_app' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
   /usr/lib/gcc/x86_64-linux-gnu/9/cc1plus -quiet -v -imultiarch x86_64-linux-gnu -D_GNU_SOURCE my_application.cc -quiet -dumpbase my_application.cc -mtune=generic -march=x86-64 -auxbase my_application -version -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection -o /tmp/ccJH4xDU.s
  GNU C++14 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
          compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl version isl-0.22.1-GMP
  
  GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  ignoring duplicate directory "/usr/include/x86_64-linux-gnu/c++/9"
  ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"
  ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/9/include-fixed"
  ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/9/../../../../x86_64-linux-gnu/include"
  #include "..." search starts here:
  #include <...> search starts here:
   /usr/include/c++/9
   /usr/include/x86_64-linux-gnu/c++/9
   /usr/include/c++/9/backward
   /usr/lib/gcc/x86_64-linux-gnu/9/include
   /usr/local/include
   /usr/include/x86_64-linux-gnu
   /usr/include
  End of search list.
  GNU C++14 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
          compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl version isl-0.22.1-GMP
  
  GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  Compiler executable checksum: 65fe925b83d3956b533de4aaba7dace0
  COLLECT_GCC_OPTIONS='-v' '-o' 'my_app' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
   as -v --64 -o /tmp/ccvPxWQT.o /tmp/ccJH4xDU.s
  GNU汇编版本 2.34 (x86_64-linux-gnu) 使用BFD版本 (GNU Binutils for Ubuntu) 2.34
  COLLECT_GCC_OPTIONS='-v' '-o' 'my_app' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
   /usr/lib/gcc/x86_64-linux-gnu/9/cc1plus -quiet -v -imultiarch x86_64-linux-gnu -D_GNU_SOURCE my_functions.cc -quiet -dumpbase my_functions.cc -mtune=generic -march=x86-64 -auxbase my_functions -version -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection -o /tmp/ccJH4xDU.s
  GNU C++14 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
          compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl version isl-0.22.1-GMP
  
  GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  ignoring duplicate directory "/usr/include/x86_64-linux-gnu/c++/9"
  ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"
  ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/9/include-fixed"
  ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/9/../../../../x86_64-linux-gnu/include"
  #include "..." search starts here:
  #include <...> search starts here:
   /usr/include/c++/9
   /usr/include/x86_64-linux-gnu/c++/9
   /usr/include/c++/9/backward
   /usr/lib/gcc/x86_64-linux-gnu/9/include
   /usr/local/include
   /usr/include/x86_64-linux-gnu
   /usr/include
  End of search list.
  GNU C++14 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
          compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl version isl-0.22.1-GMP
  
  GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  Compiler executable checksum: 65fe925b83d3956b533de4aaba7dace0
  COLLECT_GCC_OPTIONS='-v' '-o' 'my_app' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
   as -v --64 -o /tmp/ccYEtbWT.o /tmp/ccJH4xDU.s
  GNU汇编版本 2.34 (x86_64-linux-gnu) 使用BFD版本 (GNU Binutils for Ubuntu) 2.34
  COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/9/:/usr/lib/gcc/x86_64-linux-gnu/9/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/9/:/usr/lib/gcc/x86_64-linux-gnu/
  LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/9/:/usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/9/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/9/../../../:/lib/:/usr/lib/
  COLLECT_GCC_OPTIONS='-v' '-o' 'my_app' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
   /usr/lib/gcc/x86_64-linux-gnu/9/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/9/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/9/lto-wrapper -plugin-opt=-fresolution=/tmp/cc6HJe3T.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o my_app /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/9/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/9 -L/usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/9/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/9/../../.. /tmp/ccvPxWQT.o /tmp/ccYEtbWT.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/9/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/crtn.o
  COLLECT_GCC_OPTIONS='-v' '-o' 'my_app' '-shared-libgcc' '-mtune=generic' '-march=x86-64'

这是它实际调用的那些命令了和使用的参数了。

先用这种方法建立运行环境，然后看教材的第一部分，跑起来一个程序，然后再看后面的部分。

其他环境
========

前面介绍用WSL环境，如果你不和Windows发生什么关系，彻底用它，一般就可以直接当作
一个Linux来用，这一般比较方便。但如果你要用比如DevC++之类的Windows下的IDE（集成
开发环境），它会变得没有那么方便。我这里推荐另一个环境：cygwin。

和WSL不同，WSL是在Windows中模拟一个Linux，WSL里面每个Linux的命令，从二进制开始，
就是一个真实的Linux命令，你把它拷贝到Linux的的操作系统上，它们都是可以直接运行
的。cygwin不一样，cygwin对每个命令都进行了改造，让它直接调用Windows操作系统的功
能，所以，cygwin上的命令只是功能上像一个Linux命令，但其实它们都是实实在在额
Windows程序。所以，它们可以直接在Windows上运行，不需要做特别的转换。

cygwin的主页是这个：
`cygwin <http://www.cygwin.org/>`_
。
安装程序在这里：
`cygwin-setup-x86_64 <http://www.cygwin.org/setup-x86_64.exe>`_
。
它很小，因为这只是一个安装程序，真正要装的Linux命令是要选的。安装过程需要你选择
网络是否需要proxy（如果你不知道proxy是什么，就选Direct连接。前者一般是公司内部
不能直接联网，通过一台代理服务器统一上网的时候用的。），安装路径是你未来所有
Linux程序的位置，用默认的位置就好了（通常是c:\cygwin64)。它还会让你选择下载的安
装包的位置，这是要装的软件还没有拷贝到c:\cygwin64中的临时位置，也用默认的位置就
好了（通常是和安装程序在同一个目录中）。还有一个步骤需要你选择mirrors的位置，这
是为了提高下载的速度，cygwin在全世界都放了这些安装包的镜像，你选一个离你近的，
下载起来速度比较快，国内一般可以选择163.com的镜像。

昨晚上面的准备，就会要求你选择装哪些软件，如果只是要实验一下，也用默认就可以了，
这会安装基本的命令。但如果用来做开发，我建议你再加上如下软件包的选择：

* vim: 这个你知道，编辑器
* tmux: 在一个窗口中开多个命令行
* git：这个后面会讲它的功能的，版本管理工具
* make：这个后面也会讲，工程管理工具
* gcc-core：基本gcc工具
* gcc-g++：g++编译器
* gdb：调试器
* cccc：代码量统计工具

基本上就足够支持你做C/C++的开发了。这些软件包常常有多个版本可以选，我一般会选择
最新的（版本数字最大），但没有说是测试中（后面会标注着“test”）的那些版本。

未来如果你还想加软件或者删除软件，可以重新执行上面的步骤，做不同的选择就可以了。

装完的软件都在c:\cygwin64目录下（如果你前面是这个选择的话），Windows的命令行并
不知道这个路径，所以，需要加上运行程序的路径。

方法是在文件浏览器中找到“此电脑”，点鼠标右键，选择属性，再选择“高级系统设置”，
选择“环境变量”，然后在个人的“PATH”这个设置中，加上c:\cygwin64\bin和
c:\cygwin64\usr\bin这两个目录即可。

其实还可以加上c:\cygwin64\usr\sbin和c:\cygwin\sbin这两个目录的，不过一般你这个
也不是真正的Linux，你只是要用用命令，所以“系统命令”一般不用，多一事不如少一事，
不设置就好。

PATH可以设置多个目录，它们的先后顺序会影响那个目录的命令优先其作用，比如你
cygwin里面有一个gcc，但你的DevC++里面也装了一个gcc，那么你在命令行上不指定路径
直接运行gcc，运行的是谁呢？那就是谁在前面就是谁。我个人一般把cygwin的路径放前面。

Linux命令需要使用HOME目录，但Windows是没有这个概念的。所以你还可以加一个环境变
量，叫HOME，指定你的HOME目录的位置，这个随你喜欢怎么放，我个人一般放在Windows的
个人目录中，比如你的用户名叫selina，就把HOME这个环境变量定义成:\Users\selina就
可以了。

对了，cygwin的gcc编译的程序，和其他cygwin的程序一样，也是真正的Windows程序，可
以直接在Windows上运行的。
