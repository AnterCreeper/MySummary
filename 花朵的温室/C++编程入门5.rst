.. Kenneth Lee 版权所有 2022

:Authors: Kenneth Lee
:Version: 0.1
:Date: 2022-08-30
:Status: Draft

C++编程入门5：Makefile和git
***************************

这一章，我故意放到最后面。希望你敲键盘敲烦了再说。

首先我们得说，作为程序员，把键盘练熟，这是必须的，这个不能跳过去，靠拷贝粘贴，
会让你失去对“重复”的厌恶，老把自己当机器来用。你是人，是教机器干活的人，不是
自己去当机器，所以，如果你发现有重复的事情，就应该让它变成一个逻辑，写在文本
中，而不需要每次都重新执行。

为此，你个人也得敲键盘敲得飞快，千万不要当那种只用两个手指的程序员。由于你天天
要写程序，练习量是不用担心的，你只要保证你的姿势是5个手指正确按键的，过一段时间
就不会有任何问题了。倒不用专门去练习。

好了，我们现在开始解释一下Makefile和git是什么，以便你建立“工程”的概念。

我们来举个例子，你有一个程序，分成三个cc文件，比如是main.cc，foo.cc，bar.cc。你
全部链接在一起，可以这样：::

  g++ main.cc foo.cc bar.cc -o myapp

这种事情，对于程序员来说，不可能每次都要敲一次，最简单的做法，是写成一个脚本：::

  vim compile.sh

  #!/bin/sh
  g++ main.cc foo.cc bar.cc -o myapp

这样，你每次运行这个compile.sh就可以了。不用敲那么多字了。这就是我前面说的，只
要重复的东西，就要变成“程序”（脚本也是程序）。

你看，现在我们手上有这些文件：

* compile.sh
* main.cc
* foo.cc
* bar.cc
* myapp

如果要把这些文件都保留起来，拷贝给老师，或者自己保存起来，我们可以放到同一个目
录中，然后压缩成一个rar文件，或者一个zip文件，拷贝到U盘上保存起来，这样就可以了。

这个包含所有这些文件的目录或者压缩文件，就叫一个工程。它包含了我们人头脑创造的
所有成果。

但等等，这个说法不太准确，myapp不是我们人脑的创造，它是编译器的创造。我们还是把
myapp删除，前面四个才是这个工程的一部分。

我们再考虑一下，如果我们后面修改了一下foo.cc，运行compile.sh，好像也有点浪费，因为
我们只修改了了一个文件，但编译器却编译了3个文件。很浪费。

现在我们可以解释一个新的工具了，这个工具叫make，它是另一种脚本，这个脚本专门解
决编译的问题。

我们把那个compile.sh换成一个Makefile。它是这样写的：::

  myapp: main.o foo.o bar.o
    g++ main.o foo.o bar.o -o myapp

  main.o: main.cc
    g++ -c main.cc -o main.o

  foo.o: foo.cc
    g++ -c foo.cc -o foo.o

  bar.o: bar.cc
    g++ -c bar.cc -o bar.o

这样写完以后，你再执行make这个命令，就会你修改了哪个cc文件，就只编译那个文件了。

认真看看这个文件，它其实是另一种形式的脚本。一般脚本是一个线程，顺序一个命令一
个命令执行下来的。而Makefile是一个“有条件的脚本”。

它描述的意思是：先比较一下myapp和main.o foo.o bar.o，如果后面三个文件比myapp新，
就执行下面的命令。这叫myapp“依赖”main.o, foo.o, 和bar.o

这个判断可以一路跟踪过去，由于myapp
